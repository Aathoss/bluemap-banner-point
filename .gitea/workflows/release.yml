name: Release - Build et Package
run-name: Release - Build et Package

on:
  push:
    tags:
      - "v*"
      - "release-*"

env:
  PROJECT_NAME: bluemap-banner-point
  JAVA_VERSION: 21

jobs:
  # Job de notification de d√©but de release
  notify-release-start:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Extraction de la version
        id: version
        run: |
          echo "üîç Extraction de la version..."
          echo "GITEA_REF: $GITEA_REF"
          echo "GITEA_REF_NAME: $GITEA_REF_NAME"
          echo "GITEA_REF_NAME (github): ${{ gitea.ref_name }}"

          # M√©thode 1: Utiliser gitea.ref_name (√©quivalent √† github.ref_name)
          VERSION="${{ gitea.ref_name }}"
          VERSION=${VERSION#v}
          VERSION=${VERSION#release-}

          # Si la version est vide, essayer avec GITEA_REF_NAME
          if [ -z "$VERSION" ]; then
            echo "‚ö†Ô∏è Version vide depuis gitea.ref_name, essai avec GITEA_REF_NAME..."
            VERSION=${GITEA_REF_NAME#v}
            VERSION=${VERSION#release-}
          fi

          # Si toujours vide, essayer avec GITEA_REF
          if [ -z "$VERSION" ]; then
            echo "‚ö†Ô∏è Version vide depuis GITEA_REF_NAME, essai avec GITEA_REF..."
            VERSION=${GITEA_REF#refs/tags/}
            VERSION=${VERSION#v}
            VERSION=${VERSION#release-}
          fi

          # Si toujours vide, extraire depuis pom.xml
          if [ -z "$VERSION" ]; then
            echo "‚ö†Ô∏è Version toujours vide, extraction depuis pom.xml..."
            VERSION=$(grep -o '<version>[^<]*</version>' pom.xml | head -1 | sed 's/<version>\(.*\)<\/version>/\1/')
          fi

          echo "üìã Version extraite: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION"

      - name: Notification de d√©but de release
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "üöÄ D√©but de la release",
                "description": "**Projet:** ${{ env.PROJECT_NAME }}\n**Version:** ${{ steps.version.outputs.version }}\n**Tag:** ${{ gitea.ref_name }}\n**Auteur:** ${{ gitea.actor }}",
                "color": 15844367,
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
              }]
            }'
          fi

  # Job principal de build et packaging
  build-release:
    runs-on: ubuntu-latest
    needs: notify-release-start
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Extraction de la version
        id: version
        run: |
          echo "üîç Extraction de la version..."
          echo "GITEA_REF: $GITEA_REF"
          echo "GITEA_REF_NAME: $GITEA_REF_NAME"
          echo "GITEA_REF_NAME (github): ${{ gitea.ref_name }}"

          # M√©thode 1: Utiliser gitea.ref_name (√©quivalent √† github.ref_name)
          VERSION="${{ gitea.ref_name }}"
          VERSION=${VERSION#v}
          VERSION=${VERSION#release-}

          # Si la version est vide, essayer avec GITEA_REF_NAME
          if [ -z "$VERSION" ]; then
            echo "‚ö†Ô∏è Version vide depuis gitea.ref_name, essai avec GITEA_REF_NAME..."
            VERSION=${GITEA_REF_NAME#v}
            VERSION=${VERSION#release-}
          fi

          # Si toujours vide, essayer avec GITEA_REF
          if [ -z "$VERSION" ]; then
            echo "‚ö†Ô∏è Version vide depuis GITEA_REF_NAME, essai avec GITEA_REF..."
            VERSION=${GITEA_REF#refs/tags/}
            VERSION=${VERSION#v}
            VERSION=${VERSION#release-}
          fi

          # Si toujours vide, extraire depuis pom.xml
          if [ -z "$VERSION" ]; then
            echo "‚ö†Ô∏è Version toujours vide, extraction depuis pom.xml..."
            VERSION=$(grep -o '<version>[^<]*</version>' pom.xml | head -1 | sed 's/<version>\(.*\)<\/version>/\1/')
          fi

          echo "üìã Version extraite: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION"

      - name: Installation de Java ${{ env.JAVA_VERSION }}
        run: |
          echo "üîß Installation de Java ${{ env.JAVA_VERSION }}..."
          sudo apt-get update
          sudo apt-get install -y openjdk-${{ env.JAVA_VERSION }}-jdk
          java -version
          echo "‚úÖ Java install√©"

      - name: Installation de Maven
        run: |
          echo "üì¶ Installation de Maven..."
          sudo apt-get install -y maven
          mvn -version
          echo "‚úÖ Maven install√©"

      - name: V√©rification des traductions
        run: |
          echo "üîç V√©rification des cl√©s de traduction..."
          python3 check_translations.py
          if [ $? -ne 0 ]; then
            echo "‚ùå Erreur dans les traductions"
            exit 1
          fi
          echo "‚úÖ Traductions OK"

      - name: Build du package final
        run: |
          echo "üì¶ Build du package final..."
          mvn clean package -DskipTests
          if [ $? -ne 0 ]; then
            echo "‚ùå Erreur de build"
            exit 1
          fi
          echo "‚úÖ Build r√©ussi"

      - name: Cr√©ation du lien latest
        run: |
          echo "üè∑Ô∏è Cr√©ation du lien latest..."
          echo "üìã Version extraite: ${{ steps.version.outputs.version }}"
          echo "üìã Nom du projet: ${{ env.PROJECT_NAME }}"

          cd target
          echo "üìÅ Contenu du dossier target:"
          ls -la *.jar

          # Trouver le JAR principal (celui g√©n√©r√© par Maven avec la version du pom.xml)
          # Exclure les fichiers "original-*" et "*-shaded"
          MAIN_JAR=$(ls -t *.jar | grep --invert-match "original-" | grep --invert-match "-shaded" | head -1)

          if [ -z "$MAIN_JAR" ]; then
            echo "‚ùå Aucun JAR principal trouv√©"
            exit 1
          fi

          echo "‚úÖ JAR principal trouv√©: $MAIN_JAR"

          # Cr√©er une copie pour latest
          cp "$MAIN_JAR" "${{ env.PROJECT_NAME }}-latest.jar"
          echo "‚úÖ Lien latest cr√©√©: ${{ env.PROJECT_NAME }}-latest.jar"

            - name: V√©rification du contenu du JAR
        run: |
          echo "üîç V√©rification du contenu du JAR..."
          cd target
          # Chercher le JAR principal
          JAR_FILE=$(ls -t *.jar | grep --invert-match "original-" | grep --invert-match "-shaded" | head -1)

          echo "üîç V√©rification du JAR: $JAR_FILE"
          jar -tf "$JAR_FILE" | head -20
          echo "‚úÖ Contenu du JAR v√©rifi√©"

            - name: Cr√©ation du checksum
        run: |
          echo "üîê Cr√©ation du checksum..."
          cd target
          # Chercher le JAR principal
          JAR_FILE=$(ls -t *.jar | grep --invert-match "original-" | grep --invert-match "-shaded" | head -1)

          echo "üîê Cr√©ation du checksum pour: $JAR_FILE"
          sha256sum "$JAR_FILE" > "$JAR_FILE.sha256"
          echo "‚úÖ Checksum cr√©√©: $JAR_FILE.sha256"

      - name: Upload des artefacts de release
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            target/*.jar
            target/*.sha256
          retention-days: 90

  # Job de notification de fin de release
  notify-release-end:
    runs-on: ubuntu-latest
    needs: build-release
    if: always()
    steps:
      - name: Extraction de la version
        id: version
        run: |
          VERSION=${GITEA_REF#refs/tags/}
          VERSION=${VERSION#v}
          VERSION=${VERSION#release-}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Notification de fin de release
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            if [ "${{ needs.build-release.result }}" == "success" ]; then
              STATUS="‚úÖ Release r√©ussie"
              COLOR="3066993"
              EMOJI="üéâ"
              DESCRIPTION="**Projet:** ${{ env.PROJECT_NAME }}\n**Version:** ${{ steps.version.outputs.version }}\n**Tag:** ${{ gitea.ref_name }}\n**Auteur:** ${{ gitea.actor }}\n\nüì¶ Package JAR cr√©√© avec succ√®s"
            else
              STATUS="‚ùå Release √©chou√©e"
              COLOR="15158332"
              EMOJI="üí•"
              DESCRIPTION="**Projet:** ${{ env.PROJECT_NAME }}\n**Version:** ${{ steps.version.outputs.version }}\n**Tag:** ${{ gitea.ref_name }}\n**Auteur:** ${{ gitea.actor }}\n\n‚ùå Erreur lors de la cr√©ation du package"
            fi

            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "'"$EMOJI $STATUS"'",
                "description": "'"$DESCRIPTION"'",
                "color": '"$COLOR"',
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
              }]
            }'
          fi
