name: Release - Build et Package
run-name: Release - Build et Package

on:
  push:
    tags:
      - "v*"
      - "release-*"

env:
  PROJECT_NAME: bluemap-banner-point
  JAVA_VERSION: 21
  MAVEN_OPTS: -Dmaven.repo.local=${{ github.workspace }}/.m2/repository

jobs:
  # Job de validation pr√©liminaire
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Extraction de la version
        id: version
        run: |
          echo "üîç Extraction de la version..."
          VERSION="${{ gitea.ref_name }}"
          VERSION=${VERSION#v}
          VERSION=${VERSION#release-}
          echo "üìã Version extraite: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Validation du pom.xml
        run: |
          echo "üîç Validation du pom.xml..."
          if [ ! -f "pom.xml" ]; then
            echo "‚ùå pom.xml manquant"
            exit 1
          fi
          echo "‚úÖ pom.xml trouv√©"

      - name: Validation des fichiers de traduction
        run: |
          echo "üîç Validation des fichiers de traduction..."
          if [ ! -f "check_translations.py" ]; then
            echo "‚ùå Script de v√©rification des traductions manquant"
            exit 1
          fi
          if [ ! -d "src/main/resources/lang" ]; then
            echo "‚ùå R√©pertoire de traductions manquant"
            exit 1
          fi
          echo "‚úÖ Fichiers de traduction trouv√©s"

      - name: Notification de d√©but de release
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "üöÄ D√©but de la release",
                "description": "**Projet:** ${{ env.PROJECT_NAME }}\n**Version:** ${{ steps.version.outputs.version }}\n**Tag:** ${{ gitea.ref_name }}\n**Auteur:** ${{ gitea.actor }}\n\nüîç Validation en cours...",
                "color": 15844367,
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
              }]
            }'
          fi

  # Job de build
  build:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Extraction de la version
        id: version
        run: |
          VERSION="${{ gitea.ref_name }}"
          VERSION=${VERSION#v}
          VERSION=${VERSION#release-}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Setup Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: "maven"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: V√©rification des traductions
        run: |
          echo "üîç V√©rification des cl√©s de traduction..."
          python3 check_translations.py
          if [ $? -ne 0 ]; then
            echo "‚ùå Erreur dans les traductions"
            exit 1
          fi
          echo "‚úÖ Traductions OK"

      - name: Compilation
        run: |
          echo "üî® Compilation..."
          mvn clean compile
          if [ $? -ne 0 ]; then
            echo "‚ùå Erreur de compilation"
            exit 1
          fi
          echo "‚úÖ Compilation r√©ussie"

      - name: Build du package final
        run: |
          echo "üì¶ Build du package final..."
          mvn package -DskipTests
          if [ $? -ne 0 ]; then
            echo "‚ùå Erreur de build"
            exit 1
          fi
          echo "‚úÖ Build r√©ussi"

      - name: Validation du JAR
        run: |
          echo "üîç Validation du JAR..."
          cd target

          # V√©rifier que le JAR existe
          JAR_FILE=$(ls bluemap-banner-point-*.jar 2>/dev/null | head -1)
          if [ -z "$JAR_FILE" ]; then
            echo "‚ùå Aucun JAR trouv√©"
            exit 1
          fi

          # V√©rifier que le JAR est valide
          if ! jar -tf "$JAR_FILE" > /dev/null 2>&1; then
            echo "‚ùå JAR corrompu"
            exit 1
          fi

          # V√©rifier la pr√©sence de plugin.yml
          if ! jar -tf "$JAR_FILE" | grep -q "plugin.yml"; then
            echo "‚ùå plugin.yml manquant dans le JAR"
            exit 1
          fi

          echo "‚úÖ JAR valid√©: $JAR_FILE"

      - name: Cr√©ation du lien latest
        run: |
          echo "üè∑Ô∏è Cr√©ation du lien latest..."
          cd target
          JAR_FILE=$(ls bluemap-banner-point-*.jar | head -1)
          cp "$JAR_FILE" "${{ env.PROJECT_NAME }}-latest.jar"
          echo "‚úÖ Lien latest cr√©√©"

      - name: Cr√©ation des checksums
        run: |
          echo "üîê Cr√©ation des checksums..."
          cd target
          for jar in bluemap-banner-point-*.jar; do
            sha256sum "$jar" > "$jar.sha256"
            echo "‚úÖ Checksum cr√©√© pour $jar"
          done

      - name: Upload des artefacts de release
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts-${{ steps.version.outputs.version }}
          path: |
            target/*.jar
            target/*.sha256
          retention-days: 90

  # Job de notification de fin de release
  notify-release-end:
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: always()
    steps:
      - name: Extraction de la version
        id: version
        run: |
          VERSION="${{ gitea.ref_name }}"
          VERSION=${VERSION#v}
          VERSION=${VERSION#release-}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Notification de fin de release
        run: |
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            if [ "${{ needs.build.result }}" == "success" ]; then
              STATUS="‚úÖ Release r√©ussie"
              COLOR="3066993"
              EMOJI="üéâ"
              DESCRIPTION="**Projet:** ${{ env.PROJECT_NAME }}\n**Version:** ${{ steps.version.outputs.version }}\n**Tag:** ${{ gitea.ref_name }}\n**Auteur:** ${{ gitea.actor }}\n\nüì¶ Package JAR cr√©√© avec succ√®s\nüîê Checksums g√©n√©r√©s"
            else
              STATUS="‚ùå Release √©chou√©e"
              COLOR="15158332"
              EMOJI="üí•"
              DESCRIPTION="**Projet:** ${{ env.PROJECT_NAME }}\n**Version:** ${{ steps.version.outputs.version }}\n**Tag:** ${{ gitea.ref_name }}\n**Auteur:** ${{ gitea.actor }}\n\n‚ùå Erreur lors de la cr√©ation du package\n\n**D√©tails:**\n- Validation: ${{ needs.validate.result }}\n- Build: ${{ needs.build.result }}"
            fi

            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "'"$EMOJI $STATUS"'",
                "description": "'"$DESCRIPTION"'",
                "color": '"$COLOR"',
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
              }]
            }'
          fi
